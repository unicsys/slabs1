<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/vis-network/9.1.2/dist/dist/vis-network.min.css" integrity="sha512-WgxfT5LWjfszlPHXRmBWHkV2eceiWTOBvrKCNbdgDYTHrT2AeLCGbF4sZlZw3UMN3WtL0tGUoIAKsu8mllg/XA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vis-network/9.1.2/dist/vis-network.min.js" integrity="sha512-LnvoEWDFrqGHlHmDD2101OrLcbsfkrzoSpvtSQtxK3RMnRV0eOkhhBN2dXHKRrUU8p2DGRTk35n4O8nWSVe1mQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous" />
    
    <style type="text/css">
        body {
            margin: 0;
            padding: 15px;
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
        }
        
        .container-fluid {
            max-width: 100%;
        }
        
        .table-container {
            margin-bottom: 20px;
            text-align: center;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            gap: 15px;
        }
        
        .data-table {
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            background-color: white;
        }
        
        .data-table th {
            background-color: #4CAF50;
            color: white;
        }
        
        .data-table td {
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .data-table td:hover {
            background-color: #f0f0f0;
        }
        
        .data-table tr.active-row {
            background-color: #FFE4B5 !important;
            border: 2px solid #FFA500;
        }
        
        .data-table tr.processed-row {
            background-color: #E8F5E9 !important;
        }
        
        .data-table td.highlighted {
            background-color: #FFD700 !important;
            font-weight: bold;
            border: 2px solid #FF8C00;
        }
        
        .controls {
            display: flex;
            flex-direction: column;
            gap: 10px;
            justify-content: flex-start;
        }
        
        .btn-step {
            padding: 10px 18px;
            font-size: 14px;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            transition: all 0.3s;
            width: 100px;
        }
        
        .btn-next {
            background-color: #4CAF50;
            color: white;
        }
        
        .btn-next:hover {
            background-color: #45a049;
        }
        
        .btn-reset {
            background-color: #f44336;
            color: white;
        }
        
        .btn-reset:hover {
            background-color: #da190b;
        }
        
        .btn-step:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        
        .graphs-container {
            display: grid;
            grid-template-columns: 0.85fr 1fr;
            gap: 15px;
            align-items: start;
        }
        
        .left-graph-section {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .graph-wrapper {
            min-width: 0;
        }
        
        .graph-title {
            text-align: center;
            font-size: 16px;
            font-weight: bold;
            margin-bottom: 8px;
            color: #333;
        }
        
        .network-container {
            width: 100%;
            height: 750px;
            background-color: #ffffff;
            border: 2px solid #ddd;
            border-radius: 5px;
        }
        
        .network-container.ontology-size {
            height: 450px;
        }
        
        .mapping-tool {
            width: 100%;
            background-color: #2d2d2d;
            border-radius: 8px;
            padding: 15px;
            color: #f8f8f2;
            font-family: 'Courier New', monospace;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .mapping-tool h3 {
            color: #50fa7b;
            font-size: 16px;
            margin-top: 0;
            margin-bottom: 12px;
            text-align: center;
            border-bottom: 2px solid #50fa7b;
            padding-bottom: 8px;
        }
        
        .mapping-code {
            background-color: #1e1e1e;
            padding: 12px;
            border-radius: 5px;
            font-size: 12px;
            line-height: 1.5;
            overflow-x: auto;
            max-height: 450px;
            overflow-y: auto;
        }
        
        .mapping-code .comment {
            color: #6272a4;
        }
        
        .mapping-code .keyword {
            color: #ff79c6;
        }
        
        .mapping-code .string {
            color: #f1fa8c;
        }
        
        .mapping-code .function {
            color: #50fa7b;
        }
        
        .mapping-code .variable {
            color: #8be9fd;
        }
        
        .mapping-rule {
            margin-bottom: 8px;
            padding: 6px;
            background-color: #282a36;
            border-left: 3px solid #bd93f9;
            border-radius: 3px;
        }
        
        .arrow-icon {
            color: #ff79c6;
            margin: 0 6px;
        }
    </style>
</head>

<body>
    <div class="container-fluid">
        <!-- Data Table with Controls -->
        <div class="table-container">
            <table class="table table-striped table-bordered data-table">
                <thead>
                    <tr>
                        <th>Row</th>
                        <th>Operator</th>
                        <th>Aircraft</th>
                        <th>R_Date</th>
                    </tr>
                </thead>
                <tbody id="dataTableBody">
                    <tr data-row="0">
                        <td>1</td>
                        <td data-node="JohnDoe">John Doe</td>
                        <td data-node="N737AA">Aircraft N737AA</td>
                        <td data-node="Date-01">1-Jan-25</td>
                    </tr>
                    <tr data-row="1">
                        <td>2</td>
                        <td data-node="JaneSmith">Jane Smith</td>
                        <td data-node="N905FR">Aircraft N905FR</td>
                        <td data-node="Date-02">1-Feb-25</td>
                    </tr>
                    <tr data-row="2">
                        <td>3</td>
                        <td data-node="JohnDoe">John Doe</td>
                        <td data-node="N905FR">Aircraft N905FR</td>
                        <td data-node="Date-03">1-Mar-25</td>
                    </tr>
                </tbody>
            </table>
            
            <!-- Controls -->
            <div class="controls">
                <button class="btn-step btn-next" id="nextBtn" onclick="nextStep()">▶ Next</button>
                <button class="btn-step btn-reset" onclick="resetVisualization()">↺ Reset</button>
            </div>
        </div>
        
        <!-- Graphs Side by Side with Mapping Tool under Ontology -->
        <div class="graphs-container">
            <!-- Left: Ontology + Mapping Tool -->
            <div class="left-graph-section">
                <div class="graph-wrapper">
                    <div class="graph-title">Ontology (Schema)</div>
                    <div id="ontologyNetwork" class="network-container ontology-size"></div>
                </div>
                
                <!-- Mapping Tool -->
                <div class="mapping-tool">
                    <h3>⚙️ Mapping Tool</h3>
                    <div class="mapping-code" id="mappingCode">
                        <div class="comment">// Waiting for data...</div>
                        <div class="comment">// Click ▶ Next to see mapping</div>
                    </div>
                </div>
            </div>
            
            <!-- Right: Knowledge Graph (Ontology + Data) -->
            <div class="graph-wrapper">
                <div class="graph-title">Knowledge Graph (Schema + Instances)</div>
                <div id="knowledgeGraphNetwork" class="network-container"></div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        var currentStep = 0;
        var maxSteps = 3;
        
        // Data rows mapping information
        var rowMappings = [
            {
                operator: "JohnDoe",
                aircraft: "N737AA",
                repair: "Repair-01",
                date: "Date-01",
                operatorLabel: "John Doe",
                aircraftLabel: "Aircraft N737AA",
                dateLabel: "1-Jan-25"
            },
            {
                operator: "JaneSmith",
                aircraft: "N905FR",
                repair: "Repair-02",
                date: "Date-02",
                operatorLabel: "Jane Smith",
                aircraftLabel: "Aircraft N905FR",
                dateLabel: "1-Feb-25"
            },
            {
                operator: "JohnDoe",
                aircraft: "N905FR",
                repair: "Repair-03",
                date: "Date-03",
                operatorLabel: "John Doe",
                aircraftLabel: "Aircraft N905FR",
                dateLabel: "1-Mar-25"
            }
        ];
        
        // Ontology nodes (classes only) - IDENTICAL for BOTH graphs
        var ontologyNodesData = [
            {"color": "#FDD4A0", "font": {"color": "black"}, "id": "Entity", "label": "Entity", "shape": "box", "size": 30, "title": "The most general category of thing."},
            {"color": "#FDD4A0", "font": {"color": "black"}, "id": "Continuant", "label": "Continuant", "shape": "box", "size": 25, "title": "Something that exists in full at any time (e.g., an object)."},
            {"color": "#FDD4A0", "font": {"color": "black"}, "id": "Occurrent", "label": "Occurrent", "shape": "box", "size": 25, "title": "Something that happens over time (e.g., a process)."},
            {"color": "#FFA500", "font": {"color": "black"}, "id": "Aircraft", "label": "Aircraft", "shape": "box", "size": 20, "title": "Our Class for aircraft."},
            {"color": "#FFA500", "font": {"color": "black"}, "id": "Person", "label": "Person", "shape": "box", "size": 20, "title": "Our Class for people."},
            {"color": "#FFA500", "font": {"color": "black"}, "id": "RepairProcess", "label": "RepairProcess", "shape": "box", "size": 20, "title": "Our Class for repair events."},
            {"color": "#FFA500", "font": {"color": "black"}, "id": "TimeInterval", "label": "TimeInterval", "shape": "box", "size": 20, "title": "Our Class for time intervals."}
        ];
        
        // Ontology edges (relationships) - IDENTICAL for BOTH graphs
        var ontologyEdgesData = [
            {"arrows": "to", "color": "#808080", "dashes": true, "from": "Continuant", "label": "is a", "to": "Entity"},
            {"arrows": "to", "color": "#808080", "dashes": true, "from": "Occurrent", "label": "is a", "to": "Entity"},
            {"arrows": "to", "color": "#808080", "dashes": true, "from": "Aircraft", "label": "is a", "to": "Continuant"},
            {"arrows": "to", "color": "#808080", "dashes": true, "from": "Person", "label": "is a", "to": "Continuant"},
            {"arrows": "to", "color": "#808080", "dashes": true, "from": "RepairProcess", "label": "is a", "to": "Occurrent"},
            {"arrows": "to", "color": "#808080", "dashes": true, "from": "TimeInterval", "label": "is a", "to": "Occurrent"},
            {"arrows": "to", "color": "#DC143C", "from": "RepairProcess", "label": "has_participant", "to": "Aircraft", "width": 2},
            {"arrows": "to", "color": "#DC143C", "from": "RepairProcess", "label": "has_participant", "to": "Person", "width": 2},
            {"arrows": "to", "color": "#228B22", "from": "RepairProcess", "label": "occurs_on", "to": "TimeInterval", "width": 2}
        ];
        
        // Create ONTOLOGY graph (Left side)
        var ontologyNodes = new vis.DataSet(JSON.parse(JSON.stringify(ontologyNodesData)));
        var ontologyEdges = new vis.DataSet(JSON.parse(JSON.stringify(ontologyEdgesData)));

        // Create KNOWLEDGE GRAPH (Right side) - starts with IDENTICAL ontology
        var kgNodes = new vis.DataSet(JSON.parse(JSON.stringify(ontologyNodesData)));
        var kgEdges = new vis.DataSet(JSON.parse(JSON.stringify(ontologyEdgesData)));

        var options = {
            "edges": {
                "color": {
                    "inherit": true
                },
                "smooth": {
                    "enabled": true,
                    "type": "dynamic"
                }
            },
            "interaction": {
                "dragNodes": true,
                "hideEdgesOnDrag": false,
                "hideNodesOnDrag": false
            },
            "physics": {
                "enabled": true,
                "stabilization": {
                    "enabled": true,
                    "fit": true,
                    "iterations": 1000,
                    "onlyDynamicEdges": false,
                    "updateInterval": 50
                }
            }
        };

        // Draw Ontology Network (Left)
        var ontologyContainer = document.getElementById('ontologyNetwork');
        var ontologyData = {nodes: ontologyNodes, edges: ontologyEdges};
        var ontologyNetwork = new vis.Network(ontologyContainer, ontologyData, options);

        // Draw Knowledge Graph Network (Right)
        var kgContainer = document.getElementById('knowledgeGraphNetwork');
        var kgData = {nodes: kgNodes, edges: kgEdges};
        var kgNetwork = new vis.Network(kgContainer, kgData, options);

        // Add click event listeners for node highlighting
        kgNetwork.on("click", function(params) {
            if (params.nodes.length > 0) {
                var nodeId = params.nodes[0];
                highlightNodeInTable(nodeId);
            } else {
                clearTableHighlights();
            }
        });

        // Add click event listeners for table cells
        document.querySelectorAll('.data-table td[data-node]').forEach(function(cell) {
            cell.addEventListener('click', function() {
                var nodeId = this.getAttribute('data-node');
                highlightNodeInGraph(nodeId);
                highlightTableCell(this);
            });
        });

        function highlightNodeInTable(nodeId) {
            clearTableHighlights();
            
            // Find and highlight matching table cells
            document.querySelectorAll('.data-table td[data-node="' + nodeId + '"]').forEach(function(cell) {
                cell.classList.add('highlighted');
            });
        }

        function highlightTableCell(cell) {
            clearTableHighlights();
            cell.classList.add('highlighted');
        }

        function clearTableHighlights() {
            document.querySelectorAll('.data-table td.highlighted').forEach(function(cell) {
                cell.classList.remove('highlighted');
            });
        }

        function highlightNodeInGraph(nodeId) {
            // Select the node in the knowledge graph
            kgNetwork.selectNodes([nodeId]);
            kgNetwork.focus(nodeId, {
                scale: 1.5,
                animation: {
                    duration: 500,
                    easingFunction: 'easeInOutQuad'
                }
            });
        }

        function updateMappingCode(rowIndex) {
            var mapping = rowMappings[rowIndex];
            var mappingHtml = `
                <div class="mapping-rule">
                    <div class="comment">// Processing Row ${rowIndex + 1}</div>
                </div>
                
                <div class="mapping-rule">
                    <span class="keyword">CREATE</span> <span class="variable">${mapping.operator}</span>
                    <div style="margin-left: 20px;">
                        <span class="keyword">type:</span> <span class="function">Person</span><br>
                        <span class="keyword">label:</span> <span class="string">"${mapping.operatorLabel}"</span>
                    </div>
                </div>
                
                <div class="mapping-rule">
                    <span class="keyword">CREATE</span> <span class="variable">${mapping.aircraft}</span>
                    <div style="margin-left: 20px;">
                        <span class="keyword">type:</span> <span class="function">Aircraft</span><br>
                        <span class="keyword">label:</span> <span class="string">"${mapping.aircraftLabel}"</span>
                    </div>
                </div>
                
                <div class="mapping-rule">
                    <span class="keyword">CREATE</span> <span class="variable">${mapping.date}</span>
                    <div style="margin-left: 20px;">
                        <span class="keyword">type:</span> <span class="function">TimeInterval</span><br>
                        <span class="keyword">label:</span> <span class="string">"${mapping.dateLabel}"</span>
                    </div>
                </div>
                
                <div class="mapping-rule">
                    <span class="keyword">CREATE</span> <span class="variable">${mapping.repair}</span>
                    <div style="margin-left: 20px;">
                        <span class="keyword">type:</span> <span class="function">RepairProcess</span><br>
                        <span class="keyword">label:</span> <span class="string">"${mapping.repair}"</span>
                    </div>
                </div>
                
                <div class="mapping-rule">
                    <span class="keyword">CONNECT</span>
                    <div style="margin-left: 20px;">
                        <span class="variable">${mapping.repair}</span> 
                        <span class="arrow-icon">→</span> 
                        <span class="keyword">has_participant</span> 
                        <span class="arrow-icon">→</span> 
                        <span class="variable">${mapping.operator}</span>
                    </div>
                    <div style="margin-left: 20px;">
                        <span class="variable">${mapping.repair}</span> 
                        <span class="arrow-icon">→</span> 
                        <span class="keyword">has_participant</span> 
                        <span class="arrow-icon">→</span> 
                        <span class="variable">${mapping.aircraft}</span>
                    </div>
                    <div style="margin-left: 20px;">
                        <span class="variable">${mapping.repair}</span> 
                        <span class="arrow-icon">→</span> 
                        <span class="keyword">occurs_on</span> 
                        <span class="arrow-icon">→</span> 
                        <span class="variable">${mapping.date}</span>
                    </div>
                </div>
                
                <div class="comment" style="margin-top: 10px;">// ✓ Mapping complete</div>
            `;
            
            document.getElementById('mappingCode').innerHTML = mappingHtml;
        }

        function addRowToKnowledgeGraph(rowIndex) {
            var mapping = rowMappings[rowIndex];
            
            // Check if operator node exists, if not add it
            var operatorExists = false;
            try {
                var existingNode = kgNodes.get(mapping.operator);
                if (existingNode) {
                    operatorExists = true;
                }
            } catch(e) {
                // Node doesn't exist
            }
            
            if (!operatorExists) {
                kgNodes.add({
                    "color": "#8A2BE2",
                    "font": {
                        "color": "black",
                        "size": 14,
                        "face": "Arial"
                    },
                    "id": mapping.operator,
                    "label": mapping.operatorLabel,
                    "shape": "dot",
                    "size": 20,
                    "title": "Person instance: " + mapping.operatorLabel
                });
                kgEdges.add({
                    "arrows": "to",
                    "color": "#808080",
                    "dashes": true,
                    "from": mapping.operator,
                    "label": "rdf:type",
                    "to": "Person"
                });
            }
            
            // Check if aircraft node exists, if not add it
            var aircraftExists = false;
            try {
                var existingAircraft = kgNodes.get(mapping.aircraft);
                if (existingAircraft) {
                    aircraftExists = true;
                }
            } catch(e) {
                // Node doesn't exist
            }
            
            if (!aircraftExists) {
                kgNodes.add({
                    "color": "#8A2BE2",
                    "font": {
                        "color": "black",
                        "size": 14,
                        "face": "Arial"
                    },
                    "id": mapping.aircraft,
                    "label": mapping.aircraftLabel,
                    "shape": "dot",
                    "size": 25,
                    "title": "Aircraft instance: " + mapping.aircraftLabel
                });
                kgEdges.add({
                    "arrows": "to",
                    "color": "#808080",
                    "dashes": true,
                    "from": mapping.aircraft,
                    "label": "rdf:type",
                    "to": "Aircraft"
                });
            }
            
            // Add date/time interval
            kgNodes.add({
                "color": "#9370DB",
                "font": {
                    "color": "black",
                    "size": 14,
                    "face": "Arial"
                },
                "id": mapping.date,
                "label": mapping.dateLabel,
                "shape": "dot",
                "size": 20,
                "title": "Time interval: " + mapping.dateLabel
            });
            
            kgEdges.add({
                "arrows": "to",
                "color": "#808080",
                "dashes": true,
                "from": mapping.date,
                "label": "rdf:type",
                "to": "TimeInterval"
            });
            
            // Add repair process
            kgNodes.add({
                "color": "#8A2BE2",
                "font": {
                    "color": "black",
                    "size": 14,
                    "face": "Arial"
                },
                "id": mapping.repair,
                "label": mapping.repair,
                "shape": "dot",
                "size": 20,
                "title": "Repair event " + mapping.repair
            });
            
            kgEdges.add({
                "arrows": "to",
                "color": "#808080",
                "dashes": true,
                "from": mapping.repair,
                "label": "rdf:type",
                "to": "RepairProcess"
            });
            
            kgEdges.add({
                "arrows": "to",
                "color": "#DC143C",
                "from": mapping.repair,
                "label": "has_participant",
                "to": mapping.aircraft,
                "width": 2
            });
            
            kgEdges.add({
                "arrows": "to",
                "color": "#DC143C",
                "from": mapping.repair,
                "label": "has_participant",
                "to": mapping.operator,
                "width": 2
            });
            
            kgEdges.add({
                "arrows": "to",
                "color": "#228B22",
                "from": mapping.repair,
                "label": "occurs_on",
                "to": mapping.date,
                "width": 2
            });
        }

        function nextStep() {
            if (currentStep >= maxSteps) {
                return;
            }
            
            // Highlight current row in table
            var rows = document.querySelectorAll('#dataTableBody tr');
            rows.forEach(function(row, index) {
                row.classList.remove('active-row');
                if (index < currentStep) {
                    row.classList.add('processed-row');
                }
            });
            rows[currentStep].classList.add('active-row');
            
            // Update mapping code
            updateMappingCode(currentStep);
            
            // Add data to knowledge graph
            addRowToKnowledgeGraph(currentStep);
            
            currentStep++;
            
            if (currentStep >= maxSteps) {
                document.getElementById('nextBtn').disabled = true;
            }
        }

        function resetVisualization() {
            currentStep = 0;
            
            // Reset table highlighting
            var rows = document.querySelectorAll('#dataTableBody tr');
            rows.forEach(function(row) {
                row.classList.remove('active-row', 'processed-row');
            });
            
            // Reset mapping code
            document.getElementById('mappingCode').innerHTML = `
                <div class="comment">// Waiting for data...</div>
                <div class="comment">// Click ▶ Next to see mapping</div>
            `;
            
            // Reset knowledge graph to IDENTICAL ontology as left side
            kgNodes.clear();
            kgEdges.clear();
            
            kgNodes.add(JSON.parse(JSON.stringify(ontologyNodesData)));
            kgEdges.add(JSON.parse(JSON.stringify(ontologyEdgesData)));
            
            // Reset button
            document.getElementById('nextBtn').disabled = false;
        }
    </script>
</body>
</html>
